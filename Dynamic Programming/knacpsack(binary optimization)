function<ll(vector<int>&,int)> get=[&](vector<int>&v,int size)
   {
       Cool_Bitset dp(size+1);
       dp.set(0, 1);
      
       map<int,int> mp;
       for (int x : v) mp[x]++;
 
       for(auto [w,cnt] : mp)
       {
           int cur=1;
           while(cnt>0)
           {
               dp.left_shift(w*min(cnt,cur));
               cnt-=cur;
               cur*=2;
           }
       }

 
   };

function<ll(vector<int>&,int)> get=[&](vector<int>&v,int size)
{
   map<int,int> mp;
   for(auto it : vec) mp[it]++;
   vector<int> dp(n+1,1e9);
   dp[0]=0;
   for(auto [w,cnt] : mp)
   {
         int cur=1;
         while(cnt>0)
         {
            int use=min(cnt,cur);
            for(int i=n;i>=w*use;i--)
            {
               dp[i]=min(dp[i],dp[i-w*use]+use);
            }
            cnt-=use;
            cur*=2;
         }
   }
};
