
class DSU {
    vector<int> parent, size;
    int comp;  

    stack<pair<int, int>> parentChanges;
    stack<pair<int, int>> sizeChanges;

public:
    DSU(int n) {
        parent.resize(n + 1, 0);
        size.resize(n + 1, 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
        comp = n; 
    }

    int findUpar(int node) {
        if (node == parent[node]) {
            return node;  
        }
        return parent[node] = findUpar(parent[node]);  
    }

    void unionBysize(int u, int v) {
        int ulpar_u = findUpar(u);  
        int ulpar_v = findUpar(v);  

        if (ulpar_u == ulpar_v) {
            return;  
        }

        if (size[ulpar_u] >= size[ulpar_v]) {
            parentChanges.push({ulpar_v, parent[ulpar_v]});
            sizeChanges.push({ulpar_u, size[ulpar_u]});
            
            parent[ulpar_v] = ulpar_u;
            size[ulpar_u] += size[ulpar_v];
        } else {
            parentChanges.push({ulpar_u, parent[ulpar_u]});
            sizeChanges.push({ulpar_v, size[ulpar_v]});
            
            parent[ulpar_u] = ulpar_v;
            size[ulpar_v] += size[ulpar_u];
        }

        comp--; 
    }

    void rollback() {
        if (!parentChanges.empty() && !sizeChanges.empty()) {
            // Revert the last parent and size changes
            auto [node, oldParent] = parentChanges.top();
            parentChanges.pop();
            parent[node] = oldParent;

            auto [nodeSize, oldSize] = sizeChanges.top();
            sizeChanges.pop();
            size[nodeSize] = oldSize;

            comp++;  // Increase the number of components back
        }
    }

    int getComp() {
        return comp;
    }
};
